{
    "contents" : "#' \\code{GeographicRegionNames} Returns the list of unique geographic names that can be used when creating a WorldMap.\n#'\n#' @param type... The name of the geographic region type. E.g.,\\code{name}, \\code{continent},\n#' @details\n#' Uses \\code{\\link{Zelig:zelimethods}}\n#' which depend on the \\code{\\link{class}} of the first argument.\n#'\n#' @example\n#' GeographicRegionNames(\"continents\")\n#' @export\nGeographicRegionNames <- function(type)\n{\n    data(coordinates, envir=environment())\n    unique(coordinates[[type]])\n}\n\n#' \\code{GeographicRegionTypes} The geographic region types that are available for refering in a map. E.g., \\code{name}, \\code{continent},\n#'\n#' @export\nGeographicRegionTypes <- function()\n{\n    data(coordinates, envir=environment())\n    names(coordinates)\n}\n# # Reading the coordinates.\n# getCoordinates <- function()\n# {\n#     return(rgdal::readOGR(\"https://raw.github.com/datasets/geo-boundaries-world-110m/master/countries.geojson\", \"OGRGeoJSON\"))\n# }\n\n\n#' \\code{Linear Regression} Linear Regression.\n#'\n#' reports the goodness-of-fit of an object.\n#' @param object An object for which a summary is desired..\n#' @param ... Additional arguments affecting the goodness-of-fit displayed.\n#' @details\n#' Uses \\code{\\link{Zelig:zelimethods}}\n#' which depend on the \\code{\\link{class}} of the first argument.\n#'\n#' @export\nWorldMap = function(table, treat.zeros.differently = TRUE,\n                     remove.last.column = TRUE,\n                     remove.last.row = TRUE,\n                    type = \"name\",\n                    colors = c(\"#CCF3FF\",\"#23B0DB\"),\n                    legend.title = \"\",\n                    only.show.regions.in.table = FALSE,\n                    remove.antarctica = TRUE,\n                    remove.seven.sease = TRUE,\n                    add.detail = FALSE){\n     # Correcting comment name errors.\n    if (type == \"name\")\n    {\n        correct.names <- c(\"United States\", \"United Kingdom\")\n        incorrect.names <- c(\"United States of America\", \"United Kingdom of Great Britain and Northern Ireland\")\n        rows.to.change <- match(incorrect.names, rownames(table))\n        if(!is.na(rows.to.change[1]))\n            rownames(table)[rows.to.change] <- correct.names\n    }\n    # Neatening the data.\n    if(is.vector(table) || length(dim(table)) == 1)\n    {\n        table.name = deparse(substitute(table))\n        table = as.matrix(table)\n        if(is.null(dimnames(table)))\n            stop(paste(table.name, \"has no names.\"))\n        dimnames(table)[[2]] = table.name\n    } else\n    {\n        if (remove.last.column & ncol(table) > 1)\n            table = table[, -ncol(table), drop = FALSE]\n     }\n     if (remove.last.row)\n        table = table[-nrow(table), , drop = FALSE]\n    table.names = rownames(table)\n    # Getting geographic boundaries\n    data(coordinates, envir=environment())\n    coords <- coordinates\n    coords[[type]] = as.character(coords[[type]])\n    if (remove.antarctica)\n         coords = coords[!coords$continent %in% \"Antarctica\",]\n    if (remove.seven.sease)\n         coords = coords[!coords$continent %in% \"Seven seas (open ocean)\",]\n\n#     if (type = \"name\")\n#     {\n#     if (remove.antarctica) {\n#         antarctica = c(\"Fr. S. Antarctic Lands\", \"Antarctica\")\n#         coords.names = coords$name\n#         coords = coords[!coords.names %in% antarctica,]\n#     }\n    coords.names = coords[[type]]\n    if (only.show.regions.in.table)\n        coords = coords[coords.names %in% table.names,]\n    coords.names = coords[[type]]\n    # Checking to see if input data is OK.\n    incorrect.names = table.names %in% coords.names\n    if (sum(incorrect.names) == 0)\n        stop(paste(\"Incorrect country names:\", paste(table.names[!incorrect.names],collapse=\",\")))\n    # Splicing data onto coordinate data.frame.\n    country.lookup = match(coords.names,table.names)\n    categories = colnames(table)\n    n.categories = length(categories)\n    for (i in 1:n.categories) {\n        new.var = table[country.lookup, i]\n        if(treat.zeros.differently) {\n            zeroes = new.var == 0\n            if (sum(zeroes, na.rm = TRUE) > 0)\n                new.var[zeroes] = NA\n        } else\n            new.var[is.na(new.var)] = 0\n        coords$table = new.var\n        names(coords)[ncol(coords)] = paste(\"table\", i, sep = \"\")\n    }\n    coords$table.max = apply(table, 1, max)[country.lookup]\n    require(leaflet)\n    # Creating the map\n    map = leaflet(coords)\n    opacity = 1\n    if (add.detail) {\n        opacity = .2\n        map = addTiles(map)\n    }\n    pal <- colorNumeric(palette = colors,domain = c(0, max(table)),\n            na.color =ifelse(treat.zeros.differently,\"white\", \"#808080\"))\n    map = addLegend(map, \"bottomright\", pal = pal, values = ~table.max,\n                    title = legend.title,\n                    labFormat = labelFormat(prefix = \"\"),\n                    opacity = opacity, na.label = \"0\")\n    if (n.categories == 1) {\n        map = addPolygons(map, stroke = FALSE, smoothFactor = 0.2,\n                          fillOpacity = opacity, color = ~pal(table1))\n    } else {\n        for (i in 1:n.categories) {\n            cl = as.formula(paste(\"~pal(table\", i, \")\", sep = \"\"))\n            map = addPolygons(map, stroke = FALSE, smoothFactor = 0.2,\n                               fillOpacity = opacity,\n                              color = cl, group = categories[i])\n        }\n        map = addLayersControl(map, baseGroups = categories,\n            options = layersControlOptions(collapsed = FALSE))\n    }\nmap}\n\n\n\n# z = matrix(1:6, 6,\n#            dimnames =list(\n#                c(\"Asia\", \"Africa\", \"Europe\", \"South America\", \"Oceania\", \"North America\"), \"A\"\n#            ))\n#\n# print(z)\n# WorldMap(z, type = \"continent\", remove.last.row = FALSE, remove.last.column = FALSE)\n\n",
    "created" : 1448330782271.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "309816256",
    "id" : "15F05CDE",
    "lastKnownWriteTime" : 1448331893,
    "path" : "~/GitHub/flipPlots/R/worldmap.R",
    "project_path" : "R/worldmap.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_source"
}