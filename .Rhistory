WorldMap(valid.continent.names, type = "continent",
colors = c("#AAAAAA", "#FFFFFF"), treat.NA.as.0 = FALSE, color.NA = "#23B0DB")
WorldMap(valid.continent.names, type = "continent",
colors = c("#AAAAAA", "#FFFFFF"), treat.NA.as.0 = FALSE, color.NA = "#23B0DB",
legend.title = "% agree")
WorldMap(valid.continent.names, type = "continent",
colors = c("#AAAAAA", "#FFFFFF"), treat.NA.as.0 = FALSE, color.NA = "#23B0DB",
legend.title = "% agree", only.show.regions.in.table = TRUE)
WorldMap(valid.continent.names, type = "continent",
treat.NA.as.0 = TRUE,
legend.title = "% agree", only.show.regions.in.table = TRUE)
valid.continent.names[1] <- NA
WorldMap(valid.continent.names, type = "continent",
legend.title = "% agree", only.show.regions.in.table = TRUE)
WorldMap(valid.continent.names, type = "continent", remove.antarctica = FALSE)
WorldMap(valid.continent.names, type = "continent", remove.antarctica = FALSE)
WorldMap(valid.continent.names, type = "continent", add.detail = TRUE, remove.antarctica = FALSE)
library(flipPlots)
library(flipPlots)
GeographicRegionRowNames("name")
library(sp)
GeographicRegionRowNames("name")
valid.continent.names <- matrix(0:2, 3, 1, dimnames = list(c("Fake", "Europe", "South America"), LETTERS[1]))
WorldMap(valid.continent.names, type = "continent", treat.NA.as.0 = TRUE)
valid.continent.names <- matrix(0:2, 3, 1, dimnames = list(c("Fake", "Europe", "South America"), LETTERS[1]))
WorldMap(valid.continent.names, type = "continent", treat.NA.as.0 = TRUE, detail = TRUE)
valid.continent.names <- matrix(0:2, 3, 1, dimnames = list(c("Fake", "Europe", "South America"), LETTERS[1]))
WorldMap(valid.continent.names, type = "continent", treat.NA.as.0 = TRUE, show.detail = TRUE)
valid.continent.names <- matrix(0:2, 3, 1, dimnames = list(c("Fake", "Europe", "South America"), LETTERS[1]))
WorldMap(valid.continent.names, type = "continent", treat.NA.as.0 = TRUE, add.detail = TRUE)
download.file(file.path('http://www.naturalearthdata.com/http/',
'www.naturalearthdata.com/download/50m/cultural',
'ne_50m_admin_0_countries.zip'),
f <- tempfile())
unzip(f, exdir=tempdir())
country.coordinates <- readOGR(tempdir(), 'ne_50m_admin_0_countries', encoding='UTF-8')
library(rgdal)
country.coordinates <- readOGR(tempdir(), 'ne_50m_admin_0_countries', encoding='UTF-8')
summary(country.coordinates)
devtools::use_data(country.coordinates, internal = FALSE, overwrite = TRUE)
library(flipPlots)
valid.continent.names <- matrix(0:2, 3, 1, dimnames = list(c("Fake", "Europe", "South America"), LETTERS[1]))
WorldMap(valid.continent.names, type = "continent", treat.NA.as.0 = TRUE)
GeographicRegionTypes()
# valid.continent.names <- matrix(0:2, 3, 1, dimnames = list(c("Fake", "Europe", "South America"), LETTERS[1]))
# WorldMap(valid.continent.names, type = "continent", treat.NA.as.0 = TRUE)
# valid.continent.names <- matrix(0:2, 3, 1, dimnames = list(c("Fake", "Europe", "South America"), LETTERS[1]))
# WorldMap(valid.continent.names, type = "continent", treat.NA.as.0 = TRUE)
library(flipPlots)
library(flipPlots)
matrix(0:2, 3, 1, dimnames = list(c("Fake", "Europe", "South America"), LETTERS[1]))
WorldMap(valid.continent.names,
Admin 1 â€“ States, provinces
valid.continent.names <- matrix(0:2, 3, 1, dimnames = list(c("Fake", "Europe", "South America"), LETTERS[1]))
WorldMap(valid.continent.names, type = "continent", treat.NA.as.0 = TRUE)
f <- tempfile())
unzip(f, exdir=tempdir())
library(rgdal)
map.coordinates <- readOGR(tempdir(), 'ne_50m_admin_0_countries', encoding='UTF-8')
devtools::use_data(map.coordinates, internal = FALSE, overwrite = TRUE)
library(rgdal)
#https://raw.github.com/datasets/geo-boundaries-world-110m/master/countries.geojson
#country.coordinates <- readOGR("c://delete//countries.geojson.txt", "OGRGeoJSON")
# Code source: http://stackoverflow.com/questions/29118059/display-spatialpolygonsdataframe-on-leaflet-map-with-r
download.file(file.path('http://www.naturalearthdata.com/http/',
'www.naturalearthdata.com/download/50m/cultural',
'ne_50m_admin_0_countries.zip'),
f <- tempfile())
unzip(f, exdir=tempdir())
library(rgdal)
map.coordinates <- readOGR(tempdir(), 'ne_50m_admin_0_countries', encoding='UTF-8')
devtools::use_data(map.coordinates, internal = FALSE, overwrite = TRUE)
library(flipPlots)
valid.continent.names <- matrix(0:2, 3, 1, dimnames = list(c("Fake", "Europe", "South America"), LETTERS[1]))
WorldMap(valid.continent.names, type = "continent", treat.NA.as.0 = TRUE)
library(flipPlots)
GeographicRegionRowNames("name")
sort(as.character(GeographicRegionRowNames("name")))
valid.country.names <- matrix(1:2, 2,dimnames =list(c("Australia", "New Zealand"), "A"))
WorldMap(valid.country.names)
valid.country.names <- matrix(1:2, 2,dimnames =list(c("Australia", "New Zealand"), "A"))
WorldMap(valid.country.names, remove.last.column = TRUE)
valid.country.names <- matrix(1:2, 2,dimnames =list(c("Australia", "New Zealand"), "%"))
WorldMap(valid.country.names, remove.last.column = TRUE)
dinmanes(valid.country.names)
dinnames(valid.country.names)
dimnames(valid.country.names)
dimnames(valid.country.names)[[2]]
valid.country.names <- 1:2
names(valid.country.names) <- c("Australia", "New Zealand")
WorldMap(valid.country.names)
valid.country.names <- 1:2
names(valid.country.names) <- c("Australia", "New Zealand")
WorldMap(valid.country.names)
WorldMap(valid.country.names)
WorldMap(as.matrix(valid.country.names))
library(sp)
as.matrix(valid.country.names)
dimnames(as.matrix(valid.country.names))
library(flipPlots)
valid.country.names <- 1:2
names(valid.country.names) <- c("Australia", "New Zealand")
WorldMap(valid.country.names)
#
valid.continent.names <- matrix(0:2, 3, 1, dimnames = list(c("Fake", "Europe", "South America"), LETTERS[1]))
WorldMap(valid.continent.names, type = "continent", treat.NA.as.0 = TRUE)
#
valid.continent.names <- matrix(1:3, 3, 2, dimnames = list(c("Asia", "Europe", "South America"), LETTERS[1:2]))
WorldMap(valid.continent.names, type = "continent")
WorldMap(valid.continent.names, type = "continent", treat.NA.as.0 = TRUE)
WorldMap(valid.continent.names, type = "continent", treat.NA.as.0 = TRUE, remove.last.column = TRUE)
WorldMap(valid.continent.names[,1], type = "continent", treat.NA.as.0 = TRUE)
WorldMap(valid.continent.names, type = "continent", remove.last.column = TRUE)
WorldMap(valid.continent.names, type = "continent", remove.last.row = TRUE)
WorldMap(valid.continent.names, type = "continent", colors = c("#AAAAAA", "#FFFFFF"))
WorldMap(valid.continent.names, type = "continent",
colors = c("#AAAAAA", "#FFFFFF"), treat.NA.as.0 = TRUE, color.NA = "#23B0DB")
WorldMap(valid.continent.names, type = "continent",
colors = c("#AAAAAA", "#FFFFFF"), treat.NA.as.0 = FALSE, color.NA = "#23B0DB")
WorldMap(valid.continent.names, type = "continent",
colors = c("#AAAAAA", "#FFFFFF"), treat.NA.as.0 = FALSE, color.NA = "#23B0DB",
legend.title = "% agree")
WorldMap(valid.continent.names, type = "continent",
colors = c("#AAAAAA", "#FFFFFF"), treat.NA.as.0 = FALSE, color.NA = "#23B0DB",
legend.title = "% agree", only.show.regions.in.table = TRUE)
WorldMap(valid.continent.names, type = "continent",
treat.NA.as.0 = TRUE,
legend.title = "% agree", only.show.regions.in.table = TRUE)
valid.continent.names[1] <- NA
WorldMap(valid.continent.names, type = "continent",
legend.title = "% agree", only.show.regions.in.table = TRUE)
WorldMap(valid.continent.names, type = "continent", remove.antarctica = FALSE)
WorldMap(valid.continent.names, type = "continent", remove.antarctica = FALSE)
WorldMap(valid.continent.names, type = "continent", add.detail = TRUE, remove.antarctica = FALSE)
valid.country.names <- matrix(1:2, 2,dimnames =list(c("Australia", "New Zealand"), "A"))
WorldMap(valid.country.names)
install.packages("rgdal")
install.packages("rgdal")
WorldMap(as.array(valid.country.names))
valid.country.names <- 1:2
names(valid.country.names) <- c("Australia", "New Zealand")
WorldMap(as.array(valid.country.names))
library(flipPlots)
valid.country.names <- 1:2
names(valid.country.names) <- c("Australia", "New Zealand")
WorldMap(as.array(valid.country.names))
help(array)
valid.country.names <- array(1:2, dim = 2, dimnames = c("Australia", "New Zealand"))
WorldMap(as.array(valid.country.names))
array
valid.country.names
valid.country.names <- array(1:2, dim = 2, dimnames = list(c("Australia", "New Zealand")))
WorldMap(as.array(valid.country.names))
valid.country.names <- array(1:2, dim = 2, dimnames = list(c("Australia", "New Zealand")))
WorldMap(as.array(valid.country.names))
WorldMap(valid.country.names)
library(flipPlots)
library(flipPlots)
library(flipPlots)
library(flipPlots)
library(flipPlots)
factor(seq(0,1,10))
seq(0,1,10)
hep(seq)
help(seq)
seq(0,.5,.1)
as.factor(seq(0,.5,.1))
as.numeric(as.factor(seq(0,.5,.1)))
as.numeric(as.factor(c(.1, .2, .3))
as.numeric(as.factor(c(.1, .2, .3)))
_as.numeric(as.factor(c(.01 .2, .94)))_
as.numeric(as.factor(c(.01 .2, .94)))
as.numeric(as.factor(c(.01, .2, .94)))
as.numeric(as.character(as.factor(c(.01, .2, .94))))
library(flipPlots)
test(x)
@export
library(flipPlots)
test()
library(flipPlots)
test
test()
library(flipPlots)
Stuffed
Stuffed()
x = "dog"
Stuffed()
library(rgdal)
#https://raw.github.com/datasets/geo-boundaries-world-110m/master/countries.geojson
#country.coordinates <- readOGR("c://delete//countries.geojson.txt", "OGRGeoJSON")
# Code source: http://stackoverflow.com/questions/29118059/display-spatialpolygonsdataframe-on-leaflet-map-with-r
download.file(file.path('http://www.naturalearthdata.com/http/',
'www.naturalearthdata.com/download/50m/cultural',
'ne_110m_admin_0_countries.zip'),
f <- tempfile())
unzip(f, exdir=tempdir())
library(rgdal)
map.coordinates <- readOGR(tempdir(), 'ne_50m_admin_0_countries', encoding='UTF-8')
devtools::use_data(map.coordinates, internal = FALSE, overwrite = TRUE)
download.file(file.path('http://www.naturalearthdata.com/http/',
'www.naturalearthdata.com/download/110m/cultural',
'ne_100m_admin_0_countries.zip'),
download.file(file.path('http://www.naturalearthdata.com/http/',
'www.naturalearthdata.com/download/50m/cultural',
'ne_50m_admin_0_countries.zip')
f <- tempfile())
download.file(file.path('http://www.naturalearthdata.com/http/',
'www.naturalearthdata.com/download/50m/cultural',
'ne_50m_admin_0_countries.zip')
)
download.file(file.path('http://www.naturalearthdata.com/http/',
'www.naturalearthdata.com/download/50m/cultural',
'ne_50m_admin_0_countries.zip'), f <- tempfile())
download.file(file.path('http://www.naturalearthdata.com/http/',
'www.naturalearthdata.com/download/110m/cultural',
'ne_110m_admin_0_countries.zip'), f <- tempfile())
unzip(f, exdir=tempdir())
library(rgdal)
map.coordinates <- readOGR(tempdir(), 'ne_50m_admin_0_countries', encoding='UTF-8')
devtools::use_data(map.coordinates, internal = FALSE, overwrite = TRUE)
unzip(f, exdir=tempdir())
library(rgdal)
map.coordinates <- readOGR(tempdir(), 'ne_110m_admin_0_countries', encoding='UTF-8')
devtools::use_data(map.coordinates, internal = FALSE, overwrite = TRUE)
download.file(file.path('http://www.naturalearthdata.com/http/',
'www.naturalearthdata.com/download/50m/cultural',
'ne_50m_admin_0_countries.zip'), f <- tempfile())
unzip(f, exdir=tempdir())
library(rgdal)
map.coordinates <- readOGR(tempdir(), 'ne_50m_admin_0_countries', encoding='UTF-8')
devtools::use_data(map.coordinates, internal = FALSE, overwrite = TRUE)
library(plotly)
set.seed(100)
d <- diamonds[sample(nrow(diamonds), 1000), ]
dat <- d[,c("carat","price", "depth", "table", "color")]
class(data) <- "BubbleWorthy"
print.BubbleWorthy <- function(x)
{
print(x)
}
dat
print.BubbleWorthy <- function(x)
{
plot(x)
}
dat
print.BubbleWorthy <- function(x)
{
plot(x)
}
dat
print.BubbleWorthy
dat
print.glm
getAnywhere("print.glm")
library(plotly)
set.seed(100)
d <- diamonds[sample(nrow(diamonds), 1000), ]
dat <- d[,c("carat","price", "depth", "table", "color")]
class(data) <- "BubbleWorthy"
print.BubbleWorthy <- function(x)
{
print(x)
}
dat
print.BubbleWorthy <- function(x)
{
plot(x)
}
dat
print.BubbleWorthy(dat)
dat
print.BubbleWorthy <- function(x)
plot_ly(dat, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = carat)
dat <- d[,c("carat","price", "depth", "table", "clarity")]
print.BubbleWorthy(dat)
plot_ly(dat, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = carat)
plot_ly(dat, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = depth, size = table)
plot_ly(dat, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = depth, size = table)
plot_ly(dat, x = "carat", y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = depth, size = table)
plot_ly(dat, x = carat, y = price, text = paste("Clarity: ", clarity),
help(plot_ly)
plot_ly(dat, x = eval("carat"), y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = depth, size = table)
plot_ly(dat, x = carat, y = price, text = paste("Clarity: ", clarity),
plot_ly(dat, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = depth, size = table)
plot_ly(dat, x = carat, y = price, text = paste("Clarity: ", clarity),
plot_ly(dat, x = substitute("carat"), y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = depth, size = table)
help(plot_ly)
plot_ly(dat, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = carat)
plot_ly(dat, x = eval(substitute("carat")), y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = carat)
plot_ly(dat, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = carat)
plot_ly(dat, x = "carat", y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = carat)
plot_ly(dat, x = as.formula("carat"), y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = carat)
plot_ly(dat, x = formula("carat"), y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = carat)
plot_ly(dat, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = carat)
plot_ly(dat, x = eval("carat"), y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = carat)
plot_ly(dat, x = substitute(eval("carat")), y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = carat)
plot_ly(dat, x = d$carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = depth, size = table)
plot_ly(dat, x = d[,1], y = d[,2], text = paste("Clarity: ", clarity),
mode = "markers", color = depth, size = table)
names(d)
plot_ly(dat, x = dat[,1], y = dat[,2], text = paste("Clarity: ", clarity),
mode = "markers", color = depth, size = table)
names(d)
plot_ly(d, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = dat[,4], size = dat[,5])
summary(dat)
plot_ly(d, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = dat[,3], size = dat[,4])
plot_ly(dat, x = dat[,1], y = dat[,2], text = paste("Clarity: ", dat[,3]),
mode = "markers", color = depth, size = table)
plot_ly(dat, x = dat[,1], y = dat[,2], text = paste("Clarity: ", dat[,3]),
mode = "markers", color = dat[,3], size = dat[,4])
help(plot_ly)
plot_ly(dat, x = as.name("carat"), y = dat[,2], text = paste("Clarity: ", dat[,3]),
mode = "markers", color = dat[,3], size = dat[,4])
plot_ly(dat, x = get("carat"), y = dat[,2], text = paste("Clarity: ", dat[,3]),
mode = "markers", color = dat[,3], size = dat[,4])
plot_ly(dat, x = get("carat"), y = price, text = paste("Clarity: ", get("clarity"),
mode = "markers", color = get("depth"), size = get("table")
,
plot_ly(dat, x = get("carat"), y = price, text = paste("Clarity: ", get("clarity")),
mode = "markers", color = get("depth"), size = get("table")
)
help(plot_ly)
names(dat)
BubblePlot <- function(x)
{
nms <- names(x)
plot_ly(dat, x = get(nms[1]), y = get(nms[2]), text = paste(nms[5], ": ", get(nms[5])),
mode = "markers", color = get(nms[3]), size = get(nms[4]))
}
BubblePlot(dat)
BubblePlot <- function(x)
{
nms <- names(x)
plot_ly(dat, x = get(nms[1]), y = get(nms[2]), text = paste(nms[5], ": ", get(nms[5])),
mode = "markers", color = get(nms[3]), size = get(nms[4]))
}
set.seed(100)
d <- diamonds[sample(nrow(diamonds), 1000), c("carat","price", "depth", "table", "clarity")]
BubblePlot(d)
class(d) <- "BubbleWorthy"
print.BubbleWorthy <- function(x)
{
print(head(x)
}
d
d
d
set.seed(100)
dat <- diamonds[sample(nrow(diamonds), 1000), c("carat","price", "depth", "table", "clarity")]
BubblePlot(dat)
class(dat) <- "BubbleWorthy"
print.BubbleWorthy <- function(x)
{
print(head(x)
}
dat
print.BubbleWorthy <- function(x)
{
print(summary(x))
}
dat
print.BubbleWorthy <- function(x)
{
print(summary(x))
}
dat
print.BubbleWorthy <- function(x)
{
summary(x)
}
dat
dat
dat
print.BubbleWorthy <- function(x)
{
print(summary(x))
}
dat
dat
print.BubbleWorthy <- function(x)
{
print(plot(x))
}
dat
dat <- as.data.frame(diamonds[sample(nrow(diamonds), 1000), c("carat","price", "depth", "table", "clarity")])
BubblePlot(dat)
class(dat) <- "BubbleWorthy"
dat
print.BubbleWorthy <- function(x)
{
print(summary(x))
}
dat
print.BubbleWorthy <- function(x)
{
print(summary(x))
}
dat
print.BubbleWorthy <- function(x)
{
print(summary(x))
}
dat
summary(dat)
class(dat)
class(dat) <- c("BubbleWorthy", class(dat))
set.seed(100)
dat <- diamonds[sample(nrow(diamonds), 1000), c("carat","price", "depth", "table", "clarity")]
BubblePlot(dat)
class(dat) <- c("BubbleWorthy", class(dat))
print.BubbleWorthy <- function(x)
{
print(summary(x))
}
dat
print.BubbleWorthy <- function(x)
{
print(plot(x))
}
dat
print.BubbleWorthy <- function(x)
{
print(BubblePlot(x))
}
dat
dat
library(plotly)
BubblePlot <- function(data)
{
nms <- names(data)
plot_ly(data, x = get(nms[1]), y = get(nms[2]), text = paste(nms[5], ": ", get(nms[5])),
mode = "markers", color = get(nms[3]), size = get(nms[4]))
}
z1 <- diamonds[sample(nrow(diamonds), 1000), c("carat","price", "depth", "table", "clarity")]
BubblePlot(z1)
devtools::use_data()
data(csd.perceptions)
library(flipPlots)
LabeledScatterPlot(csd.perceptions[,3:4])
csd.perceptions[,3:4]
LabeledScatterPlot(csd.perceptions[,3:4])
dimnames(z)[[2]] <- paste0("`", dimnames(z)[[2]], "`")
z <- csd.perceptions[,3:4]
dimnames(z)[[2]] <- paste0("`", dimnames(z)[[2]], "`")
z <- csd.perceptions[,3:4]
dimnames(z)[[2]] <- paste0("`", dimnames(z)[[2]], "`")
z
LabeledScatterPlot(z)
dimnames(z)[[2]] <- c("A", "B")#paste0("`", dimnames(z)[[2]], "`")
LabeledScatterPlot(z)
dimnames(z)[[1]] <- LETTES[[1:nrow(z)]]
dimnames(z)[[1]] <- LETTERS[[1:nrow(z)]]
#csd.perceptions[,3:4]
dimnames(z)[[1]] <- LETTERS[[1:nrow(z)]]
dimnames(z)[[1]] <- LETTERS[1:nrow(z)]
LabeledScatterPlot(z)
z
dimnames(z)[[2]] <- c("A", "B")#paste0("`", dimnames(z)[[2]], "`")
dimnames(z)[[1]] <- LETTERS[1:nrow(z)]
#csd.perceptions[,3:4]
LabeledScatterPlot(z)
z
LabeledScatterPlot(z)
library(flipPlots)
library(flipPlots)
LabeledScatterPlot(z)
q.colors <-  c(grDevices::rgb(91, 155, 213, 255, max = 255), # blue
grDevices::rgb(237, 125, 49, 255, max = 255), # orange
grDevices::rgb(165, 165, 165, 255, max = 255), # grey
grDevices::rgb(30, 192, 0, 255, max = 255), # yelow
grDevices::rgb(68, 114, 196, 255, max = 255), # darker blue
grDevices::rgb(112, 173, 71, 255, max = 255), # green
grDevices::rgb(37, 94, 145, 255, max = 255), # even darker blue
grDevices::rgb(158, 72, 14, 255, max = 255), # blood
grDevices::rgb(99, 99, 99, 255, max = 255), # dark grey
grDevices::rgb(153, 115, 0, 255, max = 255), # brown
grDevices::rgb(38, 68, 120, 255, max = 255), # very dark blue
grDevices::rgb(67, 104, 43, 255, max = 255), # darker green
grDevices::rgb(255, 255, 255, 255, max = 255), # black
grDevices::rgb(255, 35, 35, 255, max = 255)) # red
devtools::use_data(q.colors, internal = FALSE, overwrite = TRUE)
LabeledScatterPlot(z)
library(flipPlots)
LabeledScatterPlot(z)
library(flipPlots)
LabeledScatterPlot(z)
ggplotly()
plotly::ggplotly()
help(ggplotly)
plotly::ggplotly()
LabeledScatterPlot(z)
